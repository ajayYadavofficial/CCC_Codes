#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);



/*
 * Complete the 'getOneBits' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts INTEGER n as parameter.
 */

vector<int> getOneBits(int n) {
    int count = 0;
    vector<int> bits;
    int pos = 1;
    while (n > 0) {
        if (n & 1) {
            count++;
            bits.push_back(1);
        }else{
                bits.push_back(0);
        }
        pos++;
        n >>= 1;
    }
    reverse(bits.begin(), bits.end());
    for(auto it : bits)cout<<it<<" ";
    cout<<endl;
    vector<int> result;
    result.push_back(count);
    for (int i = 0; i < bits.size(); i++) {
            if(bits[i] == 1)
                result.push_back(i+1);
    }
    return result;
}

int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    vector<int> result = getOneBits(n);

    for (int i = 0; i < result.size(); i++) {
        fout << result[i];

        if (i != result.size() - 1) {
            fout << "\n";
        }
    }

    fout << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}
